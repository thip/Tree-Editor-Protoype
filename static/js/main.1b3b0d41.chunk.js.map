{"version":3,"sources":["nodes/Node.js","nodes/NodeRenderer.js","utils/TreeUtils.js","nodes/RegisterNodes.js","nodes/NothingNode.js","nodes/GreaterThanNode.js","nodes/RatioNode.js","nodes/ValueNode.js","nodes/MockDvfNode.js","nodes/Root.js","utils/TreeRenderer.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","useState","collapsed","updateCollapsed","Card","Header","onClick","title","style","float","cursor","updateTree","path","TreeUtils","createNode","Body","children","NodeRenderer","getSymbolRenderer","node","symbol","registerAllNodes","registerSymbol","description","getDescription","onChange","e","target","value","className","getSelectableSymbols","map","name","key","registerNothingNode","symbolRenderers","symbolDefs","symbolMeta","definition","meta","renderer","undefined","matchAll","match","thePropertyName","thePropertyToken","theProperty","replace","toString","this","Object","keys","filter","setValue","obj_","element","rest","obj","length","lhs","rhs","registerGreaterThanNode","registerRatioNode","type","event","registerValueNode","startDate","endDate","products","handleChange","field","registerMockDvf","data","registerRootNode","TreeRenderer","App","initial","dataUpdater","JSON","stringify","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b3b0d41.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport TreeUtils from \"../utils/TreeUtils\";\nimport {Card} from \"react-bootstrap\";\n\nexport function Node(props) {\n  const [collapsed, updateCollapsed] = useState(false);\n\n  function deleteNode() {\n    props.updateTree(props.path, TreeUtils.createNode(\"nothing\"))\n  }\n\n  function togglePanel() {\n    updateCollapsed(!collapsed);\n  }\n\n  return <Card>\n    <Card.Header onClick={togglePanel}>{props.title}\n      <div style={{float: \"right\", cursor: \"pointer\"}} onClick={deleteNode}>X</div>\n    </Card.Header>\n    {collapsed ? \"\" : <Card.Body>{props.children}</Card.Body>}\n  </Card>\n}\n","import TreeUtils from \"../utils/TreeUtils\";\n\nexport function NodeRenderer(props) {\n  return TreeUtils.getSymbolRenderer(props.node.symbol)(props.node, props.path, props.updateTree);\n}\n","import {registerAllNodes} from \"../nodes/RegisterNodes\";\n\nfunction TreeUtils(){\n  let symbolRenderers = {};\n  let symbolDefs = {};\n  let symbolMeta = {};\n\n  return {\n    registerSymbol: function(definition, meta, renderer){\n      const symbol = definition.symbol;\n      symbolRenderers[symbol] = function(node, path, updateTree){return renderer({node: node, path: path, updateTree: updateTree})};\n      symbolDefs[symbol] = definition;\n      symbolMeta[symbol] = meta;\n    },\n    getDescription: function(node){\n      const elementDescriptor = /__([a-zA-Z0-9_]+)__/g;\n\n      if(symbolMeta[node.symbol] === undefined){\n        return \"\"\n      }\n\n      let description = symbolMeta[node.symbol].description;\n\n      for (const match of symbolMeta[node.symbol].description.matchAll(elementDescriptor)) {\n        let thePropertyName = match[1];\n        let thePropertyToken = match[0];\n\n        let theProperty = node[thePropertyName];\n\n        if (theProperty.symbol === undefined){\n          description = description.replace(thePropertyToken, theProperty.toString());\n        } else {\n          description = description.replace(thePropertyToken, this.getDescription(theProperty));\n        }\n      }\n\n      return description;\n    },\n    createNode: function(symbol){\n      return symbolDefs[symbol] || symbolDefs[\"nothing\"];\n    },\n    getSymbolRenderer: function(symbol){\n      return symbolRenderers[symbol]\n    },\n    getSelectableSymbols: function(){\n      return Object.keys(symbolDefs).filter(symbol => symbolMeta[symbol].name !== undefined).map(symbol => [symbol, symbolMeta[symbol].name])\n    },\n    setValue: function(obj_, path, value){\n      let [element, ...rest] = path;\n      let obj = {...obj_};\n\n      if(rest.length === 0){\n        obj[element] = value;\n        return obj;\n      }\n\n      obj[element] = this.setValue(obj[element], rest, value);\n      return obj\n    }\n  };\n}\n\nexport default registerAllNodes(TreeUtils());\n","import {registerNothingNode} from \"./NothingNode\";\nimport {registerGreaterThanNode} from \"./GreaterThanNode\";\nimport {registerRatioNode} from \"./RatioNode\";\nimport {registerValueNode} from \"./ValueNode\";\nimport {registerMockDvf} from \"./MockDvfNode\";\nimport {registerRootNode} from \"./Root\";\n\nexport function registerAllNodes(TreeUtils) {\n  registerNothingNode(TreeUtils);\n\n  registerGreaterThanNode(TreeUtils);\n\n  registerRatioNode(TreeUtils);\n\n  registerValueNode(TreeUtils);\n\n  registerMockDvf(TreeUtils);\n\n  registerRootNode(TreeUtils);\n\n  return TreeUtils;\n}\n","import {Card} from \"react-bootstrap\";\nimport React from \"react\";\n\nexport function registerNothingNode(TreeUtils) {\n  function NothingRenderer(props) {\n    function changeMe(e) {\n      props.updateTree(props.path, TreeUtils.createNode(e.target.value));\n    }\n\n    let node = TreeUtils.createNode(\"nothing\");\n    return (\n      <Card>\n        <Card.Header>{TreeUtils.getDescription(node)}</Card.Header>\n        <Card.Body>\n          <select onChange={changeMe} className={\"form-control\"}>\n            <option value={node.symbol}>Nothing</option>\n            {TreeUtils.getSelectableSymbols().map(([symbol, name]) => {\n              return <option key={symbol} value={symbol}>{name}</option>\n            })}\n          </select>\n        </Card.Body>\n      </Card>)\n  }\n\n  TreeUtils.registerSymbol({\n    symbol: \"nothing\",\n  }, {\n    description: \"undefined\",\n  }, NothingRenderer);\n}\n","import {Node} from \"./Node\";\nimport {NodeRenderer} from \"./NodeRenderer\";\nimport React from \"react\";\n\nexport function registerGreaterThanNode(TreeUtils) {\n  function GreaterThanRenderer(props) {\n    return (\n      <Node path={props.path} title={TreeUtils.getDescription(props.node)} updateTree={props.updateTree}>\n        <NodeRenderer node={props.node.lhs} path={[...props.path, \"lhs\"]} updateTree={props.updateTree}/>\n        <NodeRenderer node={props.node.rhs} path={[...props.path, \"rhs\"]} updateTree={props.updateTree}/>\n      </Node>\n    )\n  }\n\n  TreeUtils.registerSymbol({\n    symbol: \"gt\",\n    lhs: TreeUtils.createNode(\"nothing\"),\n    rhs: TreeUtils.createNode(\"nothing\")\n  }, {\n    name: \"Greater Than\",\n    description: \"(__lhs__ > __rhs__)\",\n  }, GreaterThanRenderer);\n}\n","import {Node} from \"./Node\";\nimport {NodeRenderer} from \"./NodeRenderer\";\nimport React from \"react\";\n\nexport function registerRatioNode(TreeUtils) {\n  function RatioRenderer(props) {\n    return (\n      <Node path={props.path} title={TreeUtils.getDescription(props.node)} updateTree={props.updateTree}>\n        <NodeRenderer node={props.node.lhs} path={[...props.path, \"lhs\"]} updateTree={props.updateTree}/>\n        <NodeRenderer node={props.node.rhs} path={[...props.path, \"rhs\"]} updateTree={props.updateTree}/>\n      </Node>\n    )\n  }\n\n  TreeUtils.registerSymbol({\n    symbol: \"ratio\",\n    lhs: TreeUtils.createNode(\"nothing\"),\n    rhs: TreeUtils.createNode(\"nothing\")\n  }, {\n    name: \"Ratio\",\n    description: \"(__lhs__:__rhs__)\",\n  }, RatioRenderer);\n}\n","import {Node} from \"./Node\";\nimport React from \"react\";\n\nexport function registerValueNode(TreeUtils) {\n  function ValueRenderer(props) {\n    function handleChange(event) {\n      props.updateTree([...props.path, \"value\"], event.target.value);\n    }\n\n    return (\n      <Node path={props.path} title={\"Value\"} updateTree={props.updateTree}>\n        <input type={\"text\"} className={\"form-control\"} onChange={handleChange} value={props.node.value}/>\n      </Node>\n    )\n  }\n\n  TreeUtils.registerSymbol({\n    symbol: \"value\",\n    value: 0\n  }, {\n    name: \"Value\",\n    description: \"__value__\"\n  }, ValueRenderer);\n}\n","import {Node} from \"./Node\";\nimport React from \"react\";\n\nexport function registerMockDvf(TreeUtils) {\n  function MockDVFRenderer(props) {\n    function handleChange(field) {\n      return function (event) {\n        props.updateTree([...props.path, field], event.target.value);\n      }\n    }\n\n    return (\n      <Node path={props.path} title={TreeUtils.getDescription(props.node)} updateTree={props.updateTree}>\n        <form>\n          <div className=\"form-group\">\n            <label>Start Date</label><input type={\"text\"} className={\"form-control\"}\n                                            onChange={handleChange(\"startDate\")} value={props.node.startDate}/>\n          </div>\n          <div className=\"form-group\">\n            <label>End Date</label><input type={\"text\"} className={\"form-control\"} onChange={handleChange(\"endDate\")}\n                                          value={props.node.endDate}/>\n          </div>\n          <div className=\"form-group\">\n            <label>Products</label><input type={\"text\"} className={\"form-control\"} onChange={handleChange(\"products\")}\n                                          value={props.node.products}/>\n          </div>\n        </form>\n\n      </Node>\n    )\n  }\n\n  TreeUtils.registerSymbol({\n    symbol: \"total_sales_dvf\",\n    startDate: \"19/11/2018\",\n    endDate: \"19/11/2019\",\n    products: \"Bugblaster\"\n  }, {\n    name: \"Total Sales for product in date range\",\n    description: \"Total Sales for __products__ between __startDate__ and __endDate__\",\n  }, MockDVFRenderer);\n}\n","import {Card} from \"react-bootstrap\";\nimport {NodeRenderer} from \"./NodeRenderer\";\nimport React from \"react\";\n\nexport function registerRootNode(TreeUtils) {\n  function RootRenderer(props) {\n    return (<Card>\n      <Card.Header>{TreeUtils.getDescription(props.node)}</Card.Header>\n      <NodeRenderer node={props.node.data} path={[...props.path, \"data\"]} updateTree={props.updateTree}/>\n    </Card>)\n  }\n\n  TreeUtils.registerSymbol({\n    symbol: \"root\",\n    description: \"Condition:\",\n    data: TreeUtils.createNode(\"nothing\")\n  }, {\n    description: \"Condition:\",\n  }, RootRenderer);\n}\n","import TreeUtils from \"./TreeUtils\";\n\nexport function TreeRenderer(props) {\n  return props.data !== undefined ? TreeUtils.getSymbolRenderer(props.data.symbol)(props.data, [], props.updateTree) : \"\"\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Card} from \"react-bootstrap\";\nimport TreeUtils from \"./utils/TreeUtils\";\nimport {TreeRenderer} from \"./utils/TreeRenderer\";\n\nfunction App() {\n  const initial = TreeUtils.createNode(\"root\");\n  const [data, dataUpdater] = useState(initial);\n\n  function updateTree(path, value){\n    dataUpdater(TreeUtils.setValue(data, path, value));\n  }\n\n  return (\n    <div>\n      <TreeRenderer data={data} updateTree={updateTree} />\n      <Card>\n        <Card.Body>\n          <pre>{JSON.stringify(data, null, 2)}</pre>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}